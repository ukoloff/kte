// NCEnums.h: Enums used in NCUnitState and NCadrGeom
//////////////////////////////////////////////////////////////////////
#pragma once

#include "ResInv.h"
#include "ResLocal.h"

enum UpdateModes
{
	N_EMPTY = 0,
	N_SETTINGS = 1,
	N_OGL   = 2,
	N_MODECHANGE = 4,
	N_STATE = 8,
	N_TEXT = 16,
	N_NEWDOC = 32,
	N_CADRCHANGED = 128,
	N_LEFT = 256,
	N_SELECTTEXT = 512,
	N_NEW_TEXT = 8192,
	N_UNIT_CHANGED = 16384,
	N_DELETECONT = 32768,
	N_STATE_MEASURE = 0x10000,
	N_TOOLBAR_DEFAULT = 0x20000,
	N_COLLLOG = 0x40000,
	N_ANALYSE = 0x80000,
	N_TOOLCHANGED = 0x100000,
	N_PROGRAMCHANGED = 0x200000,
	N_SLIDERCHANGED = 0x400000,
	N_STOCKSTATECHANGE = 0x800000,
	N_LEFT_ATTR = 0x01000000,
	N_POS_CHECK = 0x02000000
};

enum Plane
{ 
	P_UNDEF = 0,
	XY = IDS_STATE_VALUE_XY,
	XZ = IDS_STATE_VALUE_XZ,
	YZ = IDS_STATE_VALUE_YZ
};
enum Cool
{
	MIST = IDS_STATE_VALUE_MIST,
	FLOOD = IDS_STATE_VALUE_FLOOD,
	COOLOFF = IDS_STATE_VALUE_COOLOFF
};

enum FeedMeasure
{
	MMpMIN = IDS_STATE_NOTE_MMpMIN,
	MMpREV = IDS_STATE_NOTE_MMpREV,
	MMpTOOTH = IDS_STATE_NOTE_MMpTOOTH,
	INCHpMIN = IDS_STATE_NOTE_INCHpMIN,
	INCHpREV = IDS_STATE_NOTE_INCHpREV,
	INCHpTOOTH = IDS_STATE_NOTE_INCHpTOOTH,
	REVApMIN = IDS_STATE_NOTE_REVApMIN,
	REVBpMIN = IDS_STATE_NOTE_REVBpMIN,
	REVCpMIN = IDS_STATE_NOTE_REVCpMIN
};

enum SpeedMeasure
{
	REVpMIN = IDS_STATE_NOTE_REVpMIN,
	REVpSEC = IDS_STATE_NOTE_REVpSEC,
};

enum RotDir
{
	R_UNDEF = IDS_STATE_VALUE_R_UNDEF,
	R_CW = IDS_STATE_VALUE_R_CW,
	R_CCW = IDS_STATE_VALUE_R_CCW
};

enum LR
{
	LEFT = IDS_STATE_VALUE_LEFT,
	RIGHT = IDS_STATE_VALUE_RIGHT,
	LR_OFF = IDS_STATE_VALUE_LR_OFF
};
enum UD
{
	UP = IDS_STATE_VALUE_UP,
	DOWN = IDS_STATE_VALUE_DOWN,
	UD_OFF = IDS_STATE_VALUE_UD_OFF
};

enum CycleType
{
	CYCLE_OFF = IDS_STATE_VALUE_CT_OFF,
	DRILL_OLD = IDS_STATE_VALUE_CT_DRILL_OLD,
	DRILL_X = IDS_STATE_VALUE_CT_DRILL_X,
	DRILL_Y = IDS_STATE_VALUE_CT_DRILL_Y,
	DRILL = IDS_STATE_VALUE_CT_DRILL, 
	DRILL_HM = IDS_STATE_VALUE_CT_DRILL_HM,
	DRILL_MP81 = IDS_STATE_VALUE_CT_DRILL_MP81,
	DRILL_HMC = IDS_STATE_VALUE_CT_DRILL_HMC,
	DRILL_HN = IDS_STATE_VALUE_CT_DRILL_HN,
	DRILLDWELL = IDS_STATE_VALUE_CT_DRILLDWELL,
	RHTAPPINGZ = IDS_STATE_VALUE_CT_RHTAPPINGZ,
	RHTAPPINGX = IDS_STATE_VALUE_CT_RHTAPPINGX,
	DRILLPECK = IDS_STATE_VALUE_CT_DRILLPECK,	
	DRILLPECKZ = IDS_STATE_VALUE_CT_DRILLPECKCYCLEZ,	
	DRILLPECKX = IDS_STATE_VALUE_CT_DRILLPECKCYCLEX,	
	RHTAPPINGPLANE = IDS_STATE_VALUE_CT_RHTAPPINGPLANE,
	TAPPING = IDS_STATE_VALUE_CT_TAPPING,
	LEFTTAPPING = IDS_STATE_VALUE_CT_LEFTTAPPING,
	CUTTING = IDS_STATE_VALUE_CT_CUTTING,//?
	GROOVE = IDS_STATE_VALUE_CT_TTHR_Mill,
	LEFTCUTTING = IDS_STATE_VALUE_CT_LEFTCUTTING,//?
	RIGHTRHTAPPING = IDS_STATE_VALUE_CT_RIGHTRHTAPPING,
	REAM = IDS_STATE_VALUE_CT_REAM,
	BORE = IDS_STATE_VALUE_CT_BORE,
	BACKBORE = IDS_STATE_VALUE_CT_BACKBORE,
	BOREDWELL = IDS_STATE_VALUE_CT_BOREDWELL,
	REAMDWELL = IDS_STATE_VALUE_CT_REAMDWELL,
	LAS = IDS_STATE_VALUE_CT_LAS,
	NUMERICON = IDS_STATE_VALUE_CT_NUMERICON,//?
	RECTANGLE = IDS_STATE_VALUE_CT_RECT,
	CIRCULARPOKET = IDS_STATE_VALUE_CT_CIRC,
	RECTPOKET = IDS_STATE_VALUE_CT_RECTC,
	TURNTHREAD = IDS_STATE_VALUE_CT_TTHR,
	TURNTHREADAUTO = IDS_STATE_VALUE_CT_TTHA,
	TURNTHREADC = IDS_STATE_VALUE_CT_TTHC,
	TURNROUGH = IDS_STATE_VALUE_CT_TROU,
	TURNLOOP = IDS_STATE_VALUE_CT_TLOO,
	TURNCLEAR = IDS_STATE_VALUE_CT_TCLE,
	TURNGROOVX = IDS_STATE_VALUE_CT_TGRX,
	TURNGROOVZ = IDS_STATE_VALUE_CT_TGRZ,
	TURNTHREADCUT = IDS_STATE_VALUE_CT_TTHCU,
	TURNCUT = IDS_STATE_VALUE_CT_TC,
	TURNFACECUT = IDS_STATE_VALUE_CT_TFC,
	TURNCUTROUGH = IDS_STATE_VALUE_CT_TCR,
	TURNFACECUTROUGH = IDS_STATE_VALUE_CT_TFCR,
	TURNCHAMFER = IDS_STATE_VALUE_CT_CH,
	TURNROUND = IDS_STATE_VALUE_CT_RN,
	MILLRECTCENTER = IDS_STATE_VALUE_CT_MR,
	MILLRECTCORNER = IDS_STATE_VALUE_CT_MRC,
	MILLRECTCENTERIN = IDS_STATE_VALUE_CT_MRIN,
	MILLRECTCORNERIN = IDS_STATE_VALUE_CT_MRINC,
	MILLRECTCENTEROUT = IDS_STATE_VALUE_CT_MROUT,
	MILLRECTCORNEROUT = IDS_STATE_VALUE_CT_MROUTC,
	MILLRECTCORNERINCLEAR = IDS_STATE_VALUE_CT_MRINCLC,
	MILLRECTCENTERINCLEAR = IDS_STATE_VALUE_CT_MRINCL,
	MILLSLOTIN = IDS_STATE_VALUE_CT_MSIN,
	MILLCIRCIN = IDS_STATE_VALUE_CT_MCIN,
	MILLCIRCINCLEAR = IDS_STATE_VALUE_CT_MCINCL,
	MILLHOLECLEAR = IDS_STATE_VALUE_CT_MHCL,
	MILLCIRCOUT = IDS_STATE_VALUE_CT_MCOUT,
	MILLCIRC = IDS_STATE_VALUE_CT_MC,
	MILLCONT = IDS_STATE_VALUE_CT_CONT,
	APPRLT = IDS_STATE_VALUE_CT_APPRLT,
	APPRCT = IDS_STATE_VALUE_CT_APPRCT,
	APPRLN = IDS_STATE_VALUE_CT_APPRLN,
	APPRLCT = IDS_STATE_VALUE_CT_APPRLCT,
	DEPLT = IDS_STATE_VALUE_CT_DEPLT,
	DEPCT = IDS_STATE_VALUE_CT_DEPCT,
	DEPLN = IDS_STATE_VALUE_CT_DEPLN,
	DEPLCT = IDS_STATE_VALUE_CT_DEPLCT,
	SPLINEA = IDS_STATE_VALUE_SPLINEA
};
enum CycleRet
{
	TOSTART = IDS_STATE_VALUE_TOSTART,
	TOREF = IDS_STATE_VALUE_TOREF
};
enum LengthOffset
{
	LO_UNDEF = IDS_STATE_VALUE_LO_UNDEF,
	INCR = IDS_STATE_VALUE_INCR,
	DECR = IDS_STATE_VALUE_DECR,
	INCR2X = IDS_STATE_VALUE_INCR2X,
	DECR2X = IDS_STATE_VALUE_DECR2X
};
enum PunchSt
{
	PUNCH_ON = IDS_STATE_VALUE_PUNCH_ON,
	PUNCH_OFF = IDS_STATE_VALUE_PUNCH_OFF
};
enum RotationType
{
	Linear,
	ShortestDistance,
	AlwaysCW,
	AlwaysCCW,
	PositiveCW,
	PositiveCCW,
	DoNotChange
};
enum TypeLineInContour
{
	CONE,
	SPHERE,
	TORAHS,
	HORIZONTAL,
	LINE_CONT,
	ARC_CONT,
	VERT_CONT,
	HOR_CONT,
	NOTKNOWN
};
enum TimerIDs
{
	T_PAUSE_ANIMATE = 1,
	T_ANIMATE = 2,
	T_COLLRESTART = 5,
	T_RUN_ANIMATE = 6,
	T_TEST = 7,
	T_RESULT = 8
};
enum CollisWithStock
{
	CWS_ALL = IDS_TSC_ALL,
	CWS_CUT = IDS_TSC_CUT,
	CWS_OFF = IDS_FALSE
};
#define CYCLE_UNDEF "C_UNDEF"
enum DX_TOOLTYPE
{
	TT_NO,
	TT_3X_CYL_BALL,
	TT_3X_CYL,
	TT_5X_BALL,
	TT_5X_FULL_BALL
};

enum RunStepsStopReason
{
	SR_PROG_END,
	SR_BREAK,
	SR_EMPTY,
	SR_NEED_PROBE,
	SR_NEED_TOUCH,
	SR_PROJ_END,
	SR_ERROR,
	SR_OK
};